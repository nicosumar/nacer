# -*- encoding : utf-8 -*-
sql_cabecera =  "select DISTINCT eadmin.nombre efector_administrador_nombre, eadmin.cuie efector_administrador_cuie, \n"+
                "      cg.numero,\n"+
                "       con.mostrado encargado, COALESCE(lsc.numero_cuasifactura,''), COALESCE(lsc.monto_total, 0)\n"+
                "from convenios_de_administracion_sumar ca\n"+
                " join efectores eadmin on ca.administrador_id = eadmin.id\n"+
                " join convenios_de_gestion_sumar cg on cg.efector_id = eadmin.id \n"+
                " join referentes r on r.efector_id = eadmin.id \n"+
                " join contactos con on con.id = r.contacto_id\n"+
                " left join liquidaciones_sumar_cuasifacturas lsc on lsc.efector_id = eadmin.id\n"+
                "where( (r.fecha_de_inicio <= now() and r.fecha_de_finalizacion is null)\n"+
                "       or \n"+
                "     ( now() BETWEEN r.fecha_de_inicio and r.fecha_de_finalizacion)\n"+
                "     )\n"+
                "order by eadmin.nombre"


cq_cabecera = CustomQuery.buscar (
{
  :sql => sql_cabecera,
  values: [@liquidacion_sumar_cuasifactura.liquidacion_sumar.id,@liquidacion_sumar_cuasifactura.id ]
})
cabecera = cq_cabecera.first

sql_detalle = "select eadmin.nombre efector_administrador_nombre, lscadmin.numero_cuasifactura, eadmin.cuie efector_administrador_cuie, \n".
"      e.nombre efector_nombre, cg.numero, ca.numero, \n".
"       con.mostrado encargado, lsc.numero_cuasifactura, lsc.monto_total, e.id, eadmin.id admin_id\n".
"from convenios_de_administracion_sumar ca\n".
" join efectores eadmin on ca.administrador_id = eadmin.id\n".
" join convenios_de_gestion_sumar cg on cg.efector_id = eadmin.id \n".
" join referentes r on r.efector_id = eadmin.id \n".
" join contactos con on con.id = r.contacto_id\n".
" join efectores e on e.id = ca.efector_id\n".
" left join liquidaciones_sumar_cuasifacturas lsc on lsc.efector_id = e.id\n".
" left join liquidaciones_sumar_cuasifacturas lscadmin on lscadmin.efector_id = eadmin.id\n".
"where 1=1\n".
"and ( (r.fecha_de_inicio <= now() and r.fecha_de_finalizacion is null)\n".
"       or \n".
"     ( now() BETWEEN r.fecha_de_inicio and r.fecha_de_finalizacion)\n".
"     )\n".
"--and e.nombre ilike '%129%'\n".
"--and e.id = 90\n".
"order by eadmin.nombre"

cq_detalle = CustomQuery.buscar (
{
  sql: sql_detalle,
  values: [@liquidacion_sumar_cuasifactura.id]
})

report.use_layout File.join(Rails.root, 'app', 'views','liquidaciones_sumar_cuasifacturas','show.tlf') do |config|
 # configuro la lista (:details)
  config.list(:details) do
    use_stores sub_total: 0, total: 0
    # Al disparar el evento que inserta el footer
    events.on :page_footer_insert do |e|
      # Seteo subtotales
      e.section.item(:sub_total).value(e.store.sub_total)
      # que empiece en 0
      e.store.sub_total = 0
    end

    # disparo la insercion del footer.
    events.on :footer_insert do |e|
      # seteo el nuevo total
      e.section.item(:total).value(e.store.total)
    end
  end
end

report.start_new_page do |page|
  page.values(
         cuasifactura_numero: cabecera[:cuasifactura_numero],
         cuasifactura_fecha: cabecera[:cuasifactura_fecha] ,
         efector_cuit: cabecera[:efector_cuit] ,
         efector_iva: cabecera[:efector_iva] ,
         efector_inicio_actividades: cabecera[:efector_inicio_actividades] ,
         efector_iibb: cabecera[:efector_iibb] ,
         efector_datos_bancarios: cabecera[:efector_datos_bancarios] ,
         efector_codigo: cabecera[:efector_codigo] ,
         efector_contrato: cabecera[:efector_contrato] ,
         efector_encargado: cabecera[:sello_mostrado] ,
         liquidacion_periodos: cabecera[:liquidacion_periodos] ,
         concepto_facturacion: cabecera[:concepto_facturacion],
         referente_mostrado: cabecera[:sello_mostrado],
         referente_primera_linea: cabecera[:firma_primera_linea],
         referente_segunda_linea: cabecera[:firma_segunda_linea] ,
         referente_tercera_linea: cabecera[:firma_tercera_linea],
         logo: (
           File.exists?(File.join(Rails.root, 'app', 'assets','images',"#{cabecera[:id]}.png")) ?
             File.join(Rails.root, 'app', 'assets','images',"#{cabecera[:id]}.png") : nil ),
         logo_texto: (
           !File.exists?(File.join(Rails.root, 'app', 'assets','images',"#{cabecera[:id]}.png")) ?
             cabecera[:nombre] : nil )

         )

  cq_detalle.each do |det|
    #agrego la fila a la lista de detalles
    page.list(:details).add_row do |row|
      row.values no: det.no,
                 prestacion_nombre: det.prestacion_nombre,
                 prestacion_codigo: det.prestacion_codigo,
                 cant: det.cant,
                 cantidad: det.cantidad

      page.list(:details) do |list|
        list.store.sub_total += det.cantidad.to_d
        list.store.total += det.cantidad.to_d
      end
    end
  end
end
