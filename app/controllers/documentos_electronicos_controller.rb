# -*- encoding : utf-8 -*-
class DocumentosElectronicosController < ApplicationController

	before_filter :authenticate_user!
  
  def index

    # nivel, rotulo, tipo: [CuasifacturaSumar, ConsolidadoSumar ] , , 

=begin  
  id          : "string" // will be autogenerated if omitted
  text        : "string" // node text
  icon        : "string" // string for custom
  state       : {
    opened    : boolean  // is the node open
    disabled  : boolean  // is the node disabled
    selected  : boolean  // is the node selected
  },
  children    : []  // array of strings or objects
  li_attr     : {}  // attributes for the generated LI node
  a_attr      : {}  // attributes for the generated A node
=end

    # Valores para los dropdown

    
    if current_user.in_group? [:administradores, :facturacion, :auditoria_medica, :coordinacion, :planificacion, :auditoria_control, :capacitacion] and false
      #@arbol_de_efectores = Efector.select([:nombre, :id]).order("nombre desc").collect {|c| [c.nombre, c.id]}

    elsif current_user.in_group? [:liquidacion_adm]
      uad = UnidadDeAltaDeDatos.find_by_codigo(session[:codigo_uad_actual])

      if uad.efector.administrador_sumar.present?
=begin
        ActiveRecord::Base.connection.execute(""+
          "select DISTINCT administrador.nombre nombre_administrador, e.nombre nombre_administrado, pi.prestacion_concepto_nombre concepto, p.periodo\n"+
          "from prestaciones_incluidas pi \n"+
          " join prestaciones_liquidadas pl on pl.prestacion_incluida_id = pi.id \n"+
          " join efectores e on e.id = pl.efector_id\n"+
          " join convenios_de_administracion ca on ca.efector_id = e.id\n"+
          " join efectores administrador on administrador.id = ca.administrador_id\n"+
          " join liquidaciones_sumar l on l.id = pi.liquidacion_id\n"+
          " join periodos p on p.id = l.periodo_id\n"+
          "where ca.administrador_id = #{uad.efector.administrador_sumar.id}\n"+
          "order by 1,2,3,4"
        )
=end

        administrados = []
        conceptos = []
        periodos = []
        documentos = []
        i = 0

        uad.efector.administrador_sumar.administrados_con_prestaciones_liquidadas.order("nombre desc").each do |ea|

          ea.conceptos_que_facturo.order(:concepto).each do |concepto|
            ea.periodos_facturados([concepto.id]).order(:periodo).each do |periodo|
              # ---------------------------------------------------------------
              # Iterar para obtener los documentos referentes a este periodo.
              # ---------------------------------------------------------------
              # Cuasifacturas - (muchas x periodo y concepto) para un efector
              # Detalle de Cuasifactura - (muchas x periodo y concepto) para un efector
              # Consolidados  - Solo P.Basico, Uno por periodo, efector
              
              # Cuasifacturas 
              ea.cuasifacturas_de_un_periodo(periodo).each do |cuasi|
                documentos << {
                  id:     "#{i}--#{cuasi.id}",
                  rotulo: "Cuasifactura N° #{cuasi.numero_cuasifactura}",
                  tipo:   'Cuasifactura',
                  imagen: "file-pdf-o.png"
                }
                i+= 1

                documentos << {
                  id:     "#{i}--#{cuasi.id}",
                  rotulo: "Detalle de Cuasifactura N° #{cuasi.numero_cuasifactura}",
                  tipo:   'DetalleDeCuasifactura',
                  imagen: "file-pdf-o.png"
                }
                i+= 1
              end

                #ea.consolidado_de_periodo(periodo).each do |consolidado|
                #  documentos << {
                #    id:     "#{i}--#{cuasi.id}",
                #    rotulo: "Consolidado N° #{consolidado.numero_de_consolidado}",
                #    tipo:   'DetalleDeCuasifactura',
                #    imagen: "file-pdf-o.png"
                #  }
                #  i+= 1
                #end

                periodos << {
                  id: "#{i}--#{periodo.id}",
                  rotulo: periodo.periodo,
                  tipo: 'Periodo',
                  imagen: "calendar.png",
                  hijos: documentos
                }
                documentos = []
                i+= 1
            end #end each periodo

            case concepto.id
            when 1    
              imagen = "stethoscope.png"
            when 2..3 
              imagen = "suero.png"
            when 4..5 
              imagen = "heart-o.png"
            end

            conceptos << {
              id: "#{i}--#{concepto.id}",
              rotulo: concepto.concepto,
              tipo: 'Concepto',
              hijos: periodos,
              imagen: imagen
            }
            i+= 1
            periodos = []
          end #end each concepto de facturacion
          administrados << {
            id: "#{i}--#{ea.id}",
            rotulo: ea.nombre,
            tipo: 'EfectorAdministrado',
            hijos: conceptos,
            imagen: "building-o.png"
          }
          i+= 1
          conceptos = []
        end #end each efector administrado

        

        @arbol_de_efectores = [{
                  id: "#{i}--#{uad.efector.administrador_sumar.id}",
                  rotulo: uad.efector.administrador_sumar.nombre,
                  tipo: 'EfectorAdministrador',
                  hijos: administrados,
                  imagen: "building.png"
                 }]
        administrados = []
        i+= 1
        
        #@efectores = [uad.efector.administrador_sumar.nombre,  uad.efector.administrador_sumar.id]
        #@efectores += uad.efector.administrador_sumar.efectores_administrados.order("nombre desc").collect {|c| [c.nombre, c.id]}

        

        #if uad.efector.administrador_sumar.count == 1
        #  @efectores = [uad.efector.administrador_sumar.nombre, uad.efector.administrador_sumar.id]
        #else
        #  @efectores = uad.efector.administrador_sumar.collect {|c| [c.nombre, c.id]}
        #end
        
        #@efectores += uad.efector.administrador_sumar.efectores_administrados.order("nombre desc").collect {|c| [c.nombre, c.id]}
      end
    elsif current_user.in_group? [:facturacion_uad] 
      uad = UnidadDeAltaDeDatos.find_by_codigo(session[:codigo_uad_actual])
      if uad.efector.present? 
        if uad.efector.es_administrador? 
          @efectores = [[uad.efector.nombre, uad.efector.id]]
          @efectores += uad.efector.efectores_administrados.order("nombre desc").collect {|c| [c.nombre, c.id]}
        else
          @efectores = Efector.where("unidad_de_alta_de_datos_id = '?' OR id = '?'", uad.id, uad.efector.id).order("nombre desc").collect {|c| [c.nombre, c.id]}
        end
      else
        @efectores = Efector.where("unidad_de_alta_de_datos_id = '?' ", uad.id).order("nombre desc").collect {|c| [c.nombre, c.id]}
      end
    end


    
    # Valores para los dropdown
    if current_user.in_group? [:administradores, :facturacion, :auditoria_medica, :coordinacion, :planificacion, :auditoria_control, :capacitacion]
      @efectores = Efector.order("nombre desc").collect {|c| [c.nombre, c.id]}
    elsif current_user.in_group? [:liquidacion_adm]
      uad = UnidadDeAltaDeDatos.find_by_codigo(session[:codigo_uad_actual])
      if uad.efector.administrador_sumar.present?
        if uad.efector.administrador_sumar.size == 1
          @efectores = [uad.efector.administrador_sumar.nombre, uad.efector.administrador_sumar.id]
        else
          @efectores = uad.efector.administrador_sumar.collect {|c| [c.nombre, c.id]}
        end
        @efectores += uad.efector.administrador_sumar.efectores_administrados.order("nombre desc").collect {|c| [c.nombre, c.id]}
      end
    elsif current_user.in_group? [:facturacion_uad] 
      uad = UnidadDeAltaDeDatos.find_by_codigo(session[:codigo_uad_actual])
      if uad.efector.present? 
        if uad.efector.es_administrador? 
          @efectores = [[uad.efector.nombre, uad.efector.id]]
          @efectores += uad.efector.efectores_administrados.order("nombre desc").collect {|c| [c.nombre, c.id]}
        else
          @efectores = Efector.where("unidad_de_alta_de_datos_id = '?' OR id = '?'", uad.id, uad.efector.id).order("nombre desc").collect {|c| [c.nombre, c.id]}
        end
      else
        @efectores = Efector.where("unidad_de_alta_de_datos_id = '?' ", uad.id).order("nombre desc").collect {|c| [c.nombre, c.id]}
      end
    end
    
    # Verifico si ya hizo el filtro o no
    if params[:efector_id].blank? 
      @efector_id = -1
      @efector = ""
    else
      @efector_id = params[:efector_id]
      # Verifico que el id del efector este entre los permitidos por su grupo (o sea, no cambio el ID de efector en la URL)

      # Si el id de efector NO esta entre los elegidos para su grupo
      unless @efectores.flatten.include? @efector_id.to_i
        @efector_id = -1
        @efector = ""
      else
        @efector = Efector.find(@efector_id)
      end
    end

    condiciones = {}
    condiciones.merge!({:e => {id: @efector_id}}) 

    
    # Crea la instancia del grid (o lleva los resultados del model al grid)
    @efector_documentos = initialize_grid(
      Periodo,
      joins:  "left join consolidados_sumar cs on (cs.periodo_id = periodos.id and cs.efector_id = #{@efector_id})\n"+
              " left join ( liquidaciones_sumar ls \n"+
              "             join liquidaciones_sumar_cuasifacturas lsc on (lsc.liquidacion_sumar_id = ls.id and  lsc.efector_id = #{@efector_id})) sub on periodos.id = sub.periodo_id",
      conditions: " sub.liquidacion_sumar_id is not null\n"+
                  " or cs.id is not null ",
      :order => 'periodos.periodo'
      )
    
    
  end
end
